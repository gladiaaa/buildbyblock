{
  "version": 3,
  "sources": ["../../nbt-js/nbt-js.js"],
  "sourcesContent": ["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\\r\n * Types                                                                       *\r\n\\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\nvar typeFields =\r\n\t['name'     , 'structure', 'format'  , 'size'];\r\n\t\r\nvar types = exports.types =\r\n[\r\n\t['end'      , null       , null      , null  ],\r\n\t['byte'     , 'word'     , 'Int8'    , 1     ],\r\n\t['short'    , 'word'     , 'Int16BE' , 2     ],\r\n\t['int'      , 'word'     , 'Int32BE' , 4     ],\r\n\t['long'     , 'list'     , 'int'     , 2     ],\r\n\t['float'    , 'word'     , 'FloatBE' , 4     ],\r\n\t['double'   , 'word'     , 'DoubleBE', 8     ],\r\n\t['byteArray', 'list'     , 'byte'    , null  ],\r\n\t['string'   , null       , null      , null  ],\r\n\t['list'     , 'list'     , null      , null  ],\r\n\t['compound' , null       , null      , null  ],\r\n\t['intArray' , 'list'     , 'int'     , null  ]\r\n];\r\n\r\ntypes.forEach(function(typeData, typeIndex)\r\n{\r\n\tvar type = { value: typeIndex };\r\n\ttypeFields.forEach(function(propertyName, propertyIndex)\r\n\t{\r\n\t\ttype[propertyName] = typeData[propertyIndex];\r\n\t});\r\n\ttypes[type.value] = types[type.name] = type;\r\n});\r\n\r\ntypes.fromSchema = function(schema)\r\n{\r\n\treturn typeof schema === 'string' ? types[schema] :\r\n\t\t(Array.isArray(schema) ? types.list : types.compound);\r\n};\r\n\r\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\\r\n * Reader                                                                      *\r\n\\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\nvar Reader = exports.Reader = function(buffer)\r\n{\r\n\tthis.buffer = buffer;\r\n\tthis.offset = 0;\r\n};\r\n\r\nfunction read(reader, object)\r\n{\r\n\tvar type = types[reader.byte().payload];\r\n\tif (type !== types.end)\r\n\t{\r\n\t\tvar name = reader.string().payload;\r\n\t\tvar result = reader[type.name]();\r\n\t\tobject.schema[name] = result.schema;\r\n\t\tobject.payload[name] = result.payload;\r\n\t}\r\n\treturn type;\r\n}\r\n\r\ntypes.forEach(function(type)\r\n{\r\n\tswitch(type.structure)\r\n\t{\r\n\t\tcase 'word':\r\n\t\t\tReader.prototype[type.name] = function()\r\n\t\t\t{\r\n\t\t\t\tvar word = this.buffer['read' + type.format](this.offset);\r\n\t\t\t\tthis.offset += type.size;\r\n\t\t\t\treturn { schema: type.name, payload: word };\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'list':\r\n\t\t\tvar isList = type === types.list;\r\n\t\t\tReader.prototype[type.name] = function()\r\n\t\t\t{\r\n\t\t\t\tvar typeName = type.format || types[this.byte().payload].name;\r\n\t\t\t\tvar result = { schema: isList ? [ typeName ] : type.name, payload: [] };\r\n\t\t\t\tvar length = type.size || this.int().payload;\r\n\t\t\t\tfor (var i = 0; i < length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar element = this[typeName]();\r\n\t\t\t\t\tif (isList) { result.schema = [ element.schema ]; }\r\n\t\t\t\t\tresult.payload.push(element.payload);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n});\r\n\r\nReader.prototype[types.string.name] = function()\r\n{\r\n\tvar length = this.short().payload;\r\n\treturn new Object\r\n\t({\r\n\t\tschema: types.string.name,\r\n\t\tpayload: this.buffer.toString('utf8', this.offset, this.offset += length)\r\n\t});\r\n};\r\n\r\nReader.prototype[types.compound.name] = function()\r\n{\r\n\tvar result = { schema: {}, payload: {} };\r\n\twhile (read(this, result) !== types.end);\r\n\treturn result;\r\n};\r\n\r\nexports.read = function(buffer)\r\n{\r\n\tvar result = { schema: {}, payload: {} };\r\n\tread(new Reader(buffer), result);\r\n\treturn result;\r\n};\r\n\r\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\\r\n * Writer                                                                      *\r\n\\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\nvar write = exports.write = function()\r\n{\r\n\treturn write[types.compound.name].apply(this, arguments);\r\n};\r\n\r\ntypes.forEach(function(type)\r\n{\r\n\tswitch(type.structure)\r\n\t{\r\n\t\tcase 'word':\r\n\t\t\twrite[type.name] = function(value)\r\n\t\t\t{\r\n\t\t\t\tvar buffer = new Buffer(type.size);\r\n\t\t\t\tbuffer['write' + type.format](value);\r\n\t\t\t\treturn buffer;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'list':\r\n\t\t\tvar isList = type === types.list;\r\n\t\t\twrite[type.name] = function(value, schema)\r\n\t\t\t{\r\n\t\t\t\tvar typeName = isList ? types.fromSchema(schema[0]).name : types[schema].format;\r\n\t\t\t\tvar buffers = [];\r\n\t\t\t\tif (isList) { buffers.push(write.byte(types[typeName].value)); }\r\n\t\t\t\tif (!type.size) { buffers.push(write.int(value.length)); }\r\n\t\t\t\tvalue.forEach(function(element)\r\n\t\t\t\t{\r\n\t\t\t\t\tbuffers.push(write[typeName](element, schema[0]));\r\n\t\t\t\t});\r\n\t\t\t\treturn Buffer.concat(buffers);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n});\r\n\r\nwrite[types.string.name] = function(value)\r\n{\r\n\tvar buffer = new Buffer(value, 'utf8');\r\n\treturn Buffer.concat([write.short(buffer.length), buffer]);\r\n};\r\n\r\nwrite[types.compound.name] = function(value, schema)\r\n{\r\n\tvar buffers = [];\r\n\tfor (var name in value)\r\n\t{\r\n\t\tvar type = types.fromSchema(schema[name]);\r\n\t\tbuffers.push(write.byte(type.value));\r\n\t\tbuffers.push(write.string(name));\r\n\t\tbuffers.push(write[type.name](value[name], schema[name]));\r\n\t}\r\n\tbuffers.push(write.byte(types.end.value));\r\n\treturn Buffer.concat(buffers);\r\n};"],
  "mappings": "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",
  "names": []
}
